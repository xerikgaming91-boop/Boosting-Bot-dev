// src/backend/Prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  engineType    = "binary"
  binaryTargets = ["windows"]
}

datasource db {
  provider = "sqlite"
  // HINWEIS: relativ zum Ordner 'src/backend/Prisma'
  url      = env("DATABASE_URL") // -> "file:./dev.db"
}

model User {
  id          Int      @id @default(autoincrement())
  discordId   String   @unique
  username    String?
  displayName String?
  avatarUrl   String?

  // Rollen
  rolesCsv    String?
  isRaidlead  Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  isOwner     Boolean  @default(false)

  highestRole String?
  roleLevel   Int      @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chars   BoosterChar[]
  signups Signup[]
}

model Raid {
  id         Int      @id @default(autoincrement())
  title      String
  difficulty String
  lootType   String
  date       DateTime
  lead       String?
  bosses     Int

  tanks       Int @default(0)
  healers     Int @default(0)
  dps         Int @default(0)
  lootbuddies Int @default(0)

  channelId String?
  messageId String?

  presetId Int?
  preset   Preset? @relation(fields: [presetId], references: [id])

  signups Signup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([date])
}

model Preset {
  id          Int    @id @default(autoincrement())
  name        String
  tanks       Int    @default(0)
  healers     Int    @default(0)
  dps         Int    @default(0)
  lootbuddies Int    @default(0)
  raids       Raid[]
}

model BoosterChar {
  id        Int     @id @default(autoincrement())
  userId    String  // Discord User ID (FK -> User.discordId)
  name      String
  realm     String
  class     String?
  spec      String?
  rioScore  Float?
  progress  String?
  itemLevel Int?
  wclUrl    String?

  updatedAt DateTime @updatedAt

  user    User       @relation(fields: [userId], references: [discordId], onDelete: Cascade)
  signups Signup[]

  // Ein User kann denselben Char (Name+Realm) nur einmal anlegen
  @@unique([userId, name, realm])

  @@index([userId])
  @@index([name])
  @@index([realm])
}

model Signup {
  id          Int      @id @default(autoincrement())
  raidId      Int
  userId      String?
  type        String   @default("DPS")
  charId      Int?
  displayName String?
  saved       Boolean  @default(false)
  note        String?
  class       String?
  status      String   @default("SIGNUPED")

  createdAt   DateTime @default(now())

  raid  Raid         @relation(fields: [raidId], references: [id], onDelete: Cascade)
  char  BoosterChar? @relation(fields: [charId], references: [id], onDelete: SetNull)
  user  User?        @relation(fields: [userId], references: [discordId], onDelete: SetNull)

  @@index([raidId])
  @@index([userId])
  @@index([charId])

  // Ein Char darf sich in EINEM Raid nur EINMAL befinden
  @@unique([raidId, charId])
}
